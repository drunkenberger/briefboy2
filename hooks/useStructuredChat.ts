import { useCallback, useState } from 'react';
import { knowledgeBaseService } from '../services/knowledgeBaseService';
import { normalizeBrief } from '../utils/briefValidation';

// --- INTERFACES ---
export interface ChatMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: number;
  questionId?: string;
  briefField?: string;
}

export interface StructuredQuestion {
  id: string;
  field: string;
  question: string;
  priority: 'high' | 'medium' | 'low';
  completed: boolean;
}

export interface UseStructuredChatResult {
  messages: ChatMessage[];
  currentQuestion: StructuredQuestion | null;
  isTyping: boolean;
  sendMessage: (message: string) => Promise<void>;
  clearChat: () => void;
  initializeChat: () => void;
  isConnected: boolean;
  error: string | null;
  progress: { current: number; total: number };
}

/**
 * Hook redise√±ado para un chat de mejora de briefs.
 * Funciona como un "Estratega Hol√≠stico".
 * 1. Analiza el brief completo UNA VEZ para crear un plan de preguntas.
 * 2. Para cada pregunta, enriquece la respuesta del usuario usando IA antes de actualizar el brief.
 */
export function useStructuredChat(
  initialBrief: any,
  onBriefChange: (updatedBrief: any) => void
): UseStructuredChatResult {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [questions, setQuestions] = useState<StructuredQuestion[]>([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [isTyping, setIsTyping] = useState(false);
  const [isConnected, setIsConnected] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [workingBrief, setWorkingBrief] = useState<any>(normalizeBrief(initialBrief));

  const getArrayFields = useCallback(() => [
    'strategicObjectives', 'targetAudience.insights', 'creativeStrategy.messageHierarchy',
    'creativeStrategy.creativeMandatories', 'channelStrategy.recommendedMix', 'successMetrics.primary', 'successMetrics.secondary',
    'budgetConsiderations.keyInvestments', 'budgetConsiderations.costOptimization',
    'riskAssessment.risks', 'implementationRoadmap.phases', 'nextSteps', 'appendix.assumptions', 'appendix.references'
  ], []);

  // --- FASE 1: AN√ÅLISIS HOL√çSTICO Y PLAN DE PREGUNTAS ---

  const generateQuestionPlan = useCallback(async (brief: any): Promise<StructuredQuestion[]> => {
    console.log('ü§ñ Iniciando an√°lisis hol√≠stico para generar plan de preguntas...');
    console.log('üìã Brief recibido para an√°lisis:', JSON.stringify(brief, null, 2));

    // Verificar si el brief tiene t√≠tulo
    if (brief.projectTitle || brief.title) {
      console.log('‚úÖ El brief YA TIENE t√≠tulo:', brief.projectTitle || brief.title);
    }

    const apiKey = process.env.EXPO_PUBLIC_OPENAI_API_KEY;
    if (!apiKey) throw new Error("OpenAI API key no encontrada.");

    const systemPrompt = `Eres un Director de Estrategia de Marketing de clase mundial con 20+ a√±os de experiencia en las mejores agencias. Tu tarea es analizar un brief existente y generar SOLO preguntas que agreguen valor real al brief. Tu objetic¬°vo es ayudar al usuario a generar un brief claro y completo que tenga toda la informacion necesaria para producir una campa√±a de clase mundial.

CONOCIMIENTO DE MEJORES PR√ÅCTICAS:
${knowledgeBaseService.getAllKnowledge()}

ERRORES COMUNES A EVITAR:
${knowledgeBaseService.getCommonMistakes()}

‚ö†Ô∏è ADVERTENCIA CR√çTICA: Si preguntas por informaci√≥n que YA EXISTE en el brief (como preguntar el t√≠tulo cuando ya tiene uno), ser√°s considerado incompetente, es importante que todas las preguntas enriquezcan el brief, evita preguntar acerca de informaci√≥n que ya est√° presente en el brief, s√≥lo haz preguntas que generen respuestas  que contengan informaci√≥n ausente en el brief. LEE EL BRIEF ANTES DE PREGUNTAR.

EJEMPLOS DE PREGUNTAS CORRECTAS E INCORRECTAS:

‚ùå INCORRECTO:
- Brief: "projectTitle": "Campa√±a Navidad 2024"
- Pregunta: "¬øCu√°l es el t√≠tulo del proyecto?" (YA EST√Å DEFINIDO)

‚ùå INCORRECTO:
- Brief: "briefSummary": "Campa√±a para aumentar ventas en temporada navide√±a"
- Pregunta: "¬øPodr√≠as resumir el proyecto?" (YA EST√Å RESUMIDO)

‚úÖ CORRECTO:
- Brief: "strategicObjectives": ["Aumentar ventas"]
- Pregunta: "Veo que quieres aumentar ventas. ¬øTienes una meta espec√≠fica de crecimiento porcentual vs el a√±o anterior?"

‚úÖ CORRECTO:
- Brief: "targetAudience": {"primary": "Familias"}
- Pregunta: "Describes a familias como audiencia. ¬øQu√© insight espec√≠fico has identificado sobre sus h√°bitos de compra navide√±os?"

‚úÖ CORRECTO:
- Brief: "projectTitle": "Campa√±a XYZ", "brandPositioning": "Marca l√≠der"
- Pregunta: "El posicionamiento como 'marca l√≠der' es claro. ¬øQu√© atributos espec√≠ficos te diferencian de la competencia?"

PROCESO DE ENRIQUECIMIENTO ESTRAT√âGICO:
1. LEE cada campo del brief completamente
2. Eval√∫a la CALIDAD del contenido, no solo si existe
3. Para cada campo, preg√∫ntate:
   - ¬øEst√° bien escrito, su informacion es completa y es claro? ‚Üí NO necesita mejoras, no preguntes por eso
   - ¬øEs demasiado gen√©rico o vago? ‚Üí Pregunta para enriquecer, para que el usuario pueda agregar m√°s detalles
   - ¬øTiene errores o no hace sentido? ‚Üí Sugiere sustituirlo por una mejor opci√≥n o agregar informaci√≥n que haga sentido
   - ¬øFalta profundidad estrat√©gica? ‚Üí Pregunta para profundizar

EJEMPLOS DE PREGUNTAS DE ENRIQUECIMIENTO:
- Profundizaci√≥n: "Veo que [campo existente]. ¬øPodr√≠as agregar m√°s detalles sobre [aspecto espec√≠fico]?"
- Enriquecimiento: "El [campo] est√° bien definido. ¬øQu√© [elemento adicional] podr√≠as agregar para fortalecerlo?"
- Conexiones: "Mencionas [A] y [B]. ¬øC√≥mo se conectan estrat√©gicamente?"
- Contexto: "Para [elemento existente], ¬øqu√© contexto competitivo o cultural es importante?"
- Especificidad: "Los [objetivos/m√©tricas] est√°n claros. ¬øQu√© n√∫meros espec√≠ficos tienes en mente?"

NUNCA PREGUNTES POR:
- T√≠tulos que est√°n bien escritos y son claros
- Informaci√≥n que ya est√° completa y espec√≠fica
- Campos que no necesitan mejoras obvias

Haz s√≥lo las preguntas que consideres necesarias para que el brief quede completo y listo para produccion.

M√ÅXIMO 10 preguntas de enriquecimiento. Si el brief est√° bien estructurado, enf√≥cate en PROFUNDIZAR, no en cambiar.

Devuelve √öNICAMENTE un objeto JSON:
{
  "questions": [
    {
      "id": "q1",
      "field": "campo_relacionado",
      "question": "pregunta estrat√©gica basada en mejores pr√°cticas que AGREGA VALOR",
      "priority": "high|medium|low",
      "justification": "Explica POR QU√â esta pregunta es necesaria y QU√â informaci√≥n espec√≠fica falta o necesita enriquecimiento"
    }
  ]
}`

    const userPrompt = `SISTEMA DE VALIDACI√ìN DE PREGUNTAS - FASE 1: AN√ÅLISIS DEL BRIEF

========== CONTENIDO ACTUAL DEL BRIEF ==========
${JSON.stringify(brief, null, 2)}
================================================



REGLAS ESTRICTAS:
1. Si un campo existe con contenido espec√≠fico y consideras que noecesita mas informacion o detalles ‚Üí NO preguntes por ese campo
2. Solo haz preguntas de enriquecimiento sobre campos existentes si hace informacion relevante para la creacion de una campa√±a publicitaria s√≥lida. Utiliza los contenidos en la knowledge base del proyecto.
3. Cada pregunta debe tener una justificaci√≥n s√≥lida


GENERA PREGUNTAS SOLO PARA CAMPOS FALTANTES O ENRIQUECIMIENTO JUSTIFICADO.`;

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${apiKey}` },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [{ role: 'system', content: systemPrompt }, { role: 'user', content: userPrompt }],
          temperature: 0.2,
          response_format: { type: "json_object" },
        }),
      });

      if (!response.ok) throw new Error(`Error de la API de OpenAI: ${response.statusText}`);

      const data = await response.json();
      const plan = data.choices?.[0]?.message?.content;
      const parsedPlan = JSON.parse(plan);

      if (!parsedPlan.questions || !Array.isArray(parsedPlan.questions)) {
        throw new Error("La respuesta de la IA no contiene un array de 'questions' v√°lido.");
      }

      console.log(`‚úÖ Plan de ${parsedPlan.questions.length} preguntas generado.`);

      // Validar que las preguntas no sean redundantes
      const validQuestions = parsedPlan.questions.filter((q: any) => {
        const field = q.field;
        const question = q.question?.toLowerCase() || '';

        // Validaciones espec√≠ficas por campo
        if (field === 'projectTitle' || field === 'title') {
          if (brief.projectTitle || brief.title) {
            console.error(`üö´ PREGUNTA RECHAZADA: "${q.question}" - El t√≠tulo YA EXISTE: "${brief.projectTitle || brief.title}"`);
            return false;
          }
        }

        if (field === 'briefSummary' || field === 'summary') {
          if (brief.briefSummary || brief.summary) {
            console.error(`üö´ PREGUNTA RECHAZADA: "${q.question}" - El resumen YA EXISTE`);
            return false;
          }
        }

        if (field === 'businessChallenge' || field === 'problemStatement') {
          if (brief.businessChallenge || brief.problemStatement) {
            console.error(`üö´ PREGUNTA RECHAZADA: "${q.question}" - El desaf√≠o YA EXISTE`);
            return false;
          }
        }

        // Validar que la pregunta no sea sobre informaci√≥n b√°sica existente
        const basicPhrases = ['cu√°l es el t√≠tulo', 'qu√© es el proyecto', 'podr√≠as decirme el nombre', 'cu√°l es el nombre'];
        if (basicPhrases.some(phrase => question.includes(phrase))) {
          console.error(`üö´ PREGUNTA RECHAZADA: "${q.question}" - Pregunta sobre informaci√≥n b√°sica existente`);
          return false;
        }

        // Validar que la pregunta no sea gen√©rica
        const genericPhrases = ['cu√°l es', 'qu√© es', 'podr√≠as decirme', 'podr√≠as definir'];
        if (genericPhrases.some(phrase => question.includes(phrase)) && !q.justification) {
          console.error(`üö´ PREGUNTA RECHAZADA: "${q.question}" - Pregunta gen√©rica sin justificaci√≥n`);
          return false;
        }

        return true;
      });

      console.log(`‚úÖ Preguntas v√°lidas despu√©s de filtrado: ${validQuestions.length}`);
      return validQuestions.map((q: any) => ({ ...q, completed: false }));

    } catch (e) {
      console.error("Error generando el plan de preguntas:", e);
      // Devolver un plan de respaldo m√°s inteligente basado en el brief actual
      const fallbackQuestions = [];

      // Solo preguntar por campos que realmente faltan
      if (!brief.projectTitle && !brief.title) {
        fallbackQuestions.push({ id: 'fallback-1', field: 'projectTitle', question: "¬øCu√°l es el t√≠tulo exacto de este proyecto o campa√±a?", priority: 'high', completed: false });
      }

      if (!brief.briefSummary && !brief.summary) {
        fallbackQuestions.push({ id: 'fallback-2', field: 'briefSummary', question: "¬øPodr√≠as resumir en 2-3 frases de qu√© trata este proyecto y qu√© busca lograr?", priority: 'high', completed: false });
      }

      if (!brief.businessChallenge && !brief.problemStatement) {
        fallbackQuestions.push({ id: 'fallback-3', field: 'businessChallenge', question: "¬øCu√°l es el principal desaf√≠o de negocio que esta campa√±a debe resolver?", priority: 'high', completed: false });
      }

      if (!brief.strategicObjectives && !brief.objectives) {
        fallbackQuestions.push({ id: 'fallback-4', field: 'strategicObjectives', question: "¬øCu√°les son los objetivos estrat√©gicos clave que esperas alcanzar?", priority: 'high', completed: false });
      }

      if (!brief.targetAudience?.primary && !brief.targetAudience) {
        fallbackQuestions.push({ id: 'fallback-5', field: 'targetAudience.primary', question: "¬øQui√©n es tu audiencia principal y qu√© sabes de sus motivaciones?", priority: 'medium', completed: false });
      }

      if (!brief.creativeStrategy?.bigIdea) {
        fallbackQuestions.push({ id: 'fallback-6', field: 'creativeStrategy.bigIdea', question: "¬øCu√°l es la gran idea que deber√≠a guiar la creatividad de esta campa√±a?", priority: 'medium', completed: false });
      }

      // Si no hay preguntas de respaldo, significa que el brief est√° completo
      if (fallbackQuestions.length === 0) {
        return []; // No questions needed
      }

      return fallbackQuestions;
    }
  }, []);


  // --- FASE 2: DI√ÅLOGO DE ENRIQUECIMIENTO ---

  const enrichUserResponse = useCallback(async (question: string, userResponse: string): Promise<string> => {
    console.log('ü§ñ Enriqueciendo la respuesta del usuario con IA...');
    const apiKey = process.env.EXPO_PUBLIC_OPENAI_API_KEY;
    if (!apiKey) return userResponse;

    const systemPrompt = `Eres un experto en redacci√≥n de marketing con conocimiento de las mejores pr√°cticas de la industria. Tu tarea es ENRIQUECER la respuesta del usuario, no reemplazarla.

CONOCIMIENTO DE MEJORES PR√ÅCTICAS:
${knowledgeBaseService.getBriefStructureGuidance()}

INSTRUCCIONES DE ENRIQUECIMIENTO:
- CONSERVA la esencia e intenci√≥n original del usuario
- AGREGA detalles profesionales y estrat√©gicos
- MEJORA la claridad y especificidad
- MANT√âN el tono y estructura preferidos del usuario
- SI la respuesta ya est√° bien, haz mejoras m√≠nimas
- NO cambies nombres, t√≠tulos o elementos espec√≠ficos que est√©n bien
- NO a√±adas etiquetas, comillas, ni formato especial
- Si es una lista, devuelve una lista mejorada
- Si es un p√°rrafo, devuelve un p√°rrafo enriquecido
- Responde √öNICAMENTE con el texto enriquecido. NADA M√ÅS.`;

    const userMessage = `Pregunta original: "${question}"\n\nRespuesta del usuario:\n---\n${userResponse}\n---\n\nRefina y enriquece esta respuesta.`;

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${apiKey}` },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [{ role: 'system', content: systemPrompt }, { role: 'user', content: userMessage }],
          temperature: 0.4,
          max_tokens: 500,
        }),
      });

      if (!response.ok) throw new Error(`Error de la API de OpenAI: ${response.statusText}`);

      const data = await response.json();
      const improvedText = data.choices?.[0]?.message?.content.trim();
      console.log("‚úÖ Respuesta enriquecida:", improvedText);
      return improvedText || userResponse;

    } catch (e) {
      console.error("Error enriqueciendo la respuesta:", e);
      return userResponse; // Devolver respuesta original si la IA falla
    }
  }, []);


  // --- L√ìGICA DEL CHAT ---

  const initializeChat = useCallback(async () => {
    console.log('üîÑ Inicializando chat con enfoque hol√≠stico...');
    setIsTyping(true);
    setError(null);
    setMessages([]);

    const welcomeMessage: ChatMessage = {
      id: `assistant-${Date.now()}`,
      role: 'assistant',
      content: "He analizado tu brief completo. Voy a hacerte preguntas estrat√©gicas sobre las √°reas que necesitan m√°s profundidad o claridad. No te preguntar√© sobre informaci√≥n que ya est√° bien definida.",
      timestamp: Date.now(),
    };
    setMessages([welcomeMessage]);

    const questionPlan = await generateQuestionPlan(workingBrief);
    setQuestions(questionPlan);

    if (questionPlan.length > 0) {
      const firstQuestion: ChatMessage = {
        id: `assistant-${Date.now() + 1}`,
        role: 'assistant',
        content: questionPlan[0].question,
        timestamp: Date.now(),
        questionId: questionPlan[0].id,
        briefField: questionPlan[0].field,
      };
      setMessages(prev => [...prev, firstQuestion]);
    } else {
       const noQuestionsMessage: ChatMessage = {
        id: `assistant-${Date.now() + 1}`,
        role: 'assistant',
        content: "üéâ ¬°Excelente! Tu brief est√° muy completo y bien estructurado. No he encontrado √°reas cr√≠ticas que requieran mejoras inmediatas. El documento tiene toda la informaci√≥n necesaria para ejecutar la campa√±a exitosamente.",
        timestamp: Date.now(),
      };
      setMessages(prev => [...prev, noQuestionsMessage]);
    }

    setIsTyping(false);
  }, [initialBrief, generateQuestionPlan]);

  const processNextQuestion = useCallback(() => {
    const nextIndex = currentQuestionIndex + 1;

    if (nextIndex < questions.length) {
      setCurrentQuestionIndex(nextIndex);
      const nextQuestion = questions[nextIndex];

      const nextQuestionMessage: ChatMessage = {
        id: `assistant-${Date.now()}`,
        role: 'assistant',
        content: nextQuestion.question,
        timestamp: Date.now(),
        questionId: nextQuestion.id,
        briefField: nextQuestion.field,
      };

      setMessages(prev => [...prev, nextQuestionMessage]);
    } else {
      // No hay m√°s preguntas
      const completionMessage: ChatMessage = {
        id: `assistant-${Date.now()}`,
        role: 'assistant',
        content: "üéâ ¬°Excelente! Hemos completado todas las mejoras al brief. Tu documento ahora est√° mucho m√°s completo y profesional. ¬øHay algo m√°s espec√≠fico que te gustar√≠a ajustar?",
        timestamp: Date.now(),
      };

      setMessages(prev => [...prev, completionMessage]);
    }
  }, [currentQuestionIndex, questions]);

  const sendMessage = useCallback(async (messageContent: string) => {
    if (!messageContent.trim() || isTyping) return;

    console.log('üì® sendMessage iniciado. currentQuestionIndex:', currentQuestionIndex, 'questions.length:', questions.length);

    const currentQuestion = questions[currentQuestionIndex];
    if (!currentQuestion) {
      console.warn('sendMessage: No current question found.');
      return;
    }

    setIsTyping(true);

    const userMessage: ChatMessage = {
      id: `user-${Date.now()}`,
      role: 'user',
      content: messageContent.trim(),
      timestamp: Date.now(),
      questionId: currentQuestion.id,
      briefField: currentQuestion.field,
    };
    setMessages(prev => [...prev, userMessage]);

    try {
      // 1. Enriquecer la respuesta del usuario
      const enrichedResponse = await enrichUserResponse(currentQuestion.question, messageContent.trim());

      // 2. Actualizar el brief localmente con la respuesta enriquecida
      const updatedBrief = { ...workingBrief };
      const shouldBeArray = getArrayFields().includes(currentQuestion.field);
      const finalValue = shouldBeArray
        ? enrichedResponse.split('\n').map(item => item.replace(/^- /, '').trim()).filter(Boolean)
        : enrichedResponse;

      if (currentQuestion.field.includes('.')) {
        const [parent, child] = currentQuestion.field.split('.');
        if (!updatedBrief[parent]) updatedBrief[parent] = {};
        updatedBrief[parent][child] = finalValue;
      } else {
        updatedBrief[currentQuestion.field] = finalValue;
      }

      setWorkingBrief(updatedBrief);
      onBriefChange(updatedBrief);

      // 3. Confirmar y pasar a la siguiente pregunta
      const confirmationMessage: ChatMessage = {
        id: `assistant-${Date.now() + 1}`,
        role: 'assistant',
        content: `¬°Perfecto! He refinado tu respuesta y actualizado el brief. \n\nAqu√≠ tienes la siguiente pregunta:`,
        timestamp: Date.now(),
      };

      setMessages(prev => [...prev, confirmationMessage]);

      // Avanzar a la siguiente pregunta
      setTimeout(() => {
        processNextQuestion();
      }, 500);

    } catch (err: any) {
      console.error('Error en sendMessage:', err);
      setError(err.message || 'Error en la comunicaci√≥n');
      const errorMessage: ChatMessage = {
        id: `assistant-${Date.now() + 1}`,
        role: 'assistant',
        content: '‚ùå Disculpa, tuve un problema t√©cnico al procesar tu respuesta.',
        timestamp: Date.now(),
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsTyping(false);
    }
  }, [
    isTyping,
    questions,
    currentQuestionIndex,
    workingBrief,
    enrichUserResponse,
    getArrayFields,
    onBriefChange,
    processNextQuestion,
  ]);

  const clearChat = useCallback(() => {
    setMessages([]);
    setQuestions([]);
    setCurrentQuestionIndex(0);
    setError(null);
    setWorkingBrief(normalizeBrief(initialBrief));
  }, [initialBrief]);

  return {
    messages,
    currentQuestion: questions[currentQuestionIndex] || null,
    isTyping,
    sendMessage,
    clearChat,
    initializeChat,
    isConnected,
    error,
    progress: {
      current: currentQuestionIndex,
      total: questions.length,
    },
  };
}