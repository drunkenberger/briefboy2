import { useState, useCallback, useEffect } from 'react';
import { normalizeBrief } from '../utils/briefValidation';
import { useBriefCompletionEvaluator } from './useBriefCompletionEvaluator';

export interface ChatMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: number;
  questionId?: string;
  briefField?: string;
}

export interface StructuredQuestion {
  id: string;
  field: string;
  question: string;
  followUp?: string;
  priority: 'high' | 'medium' | 'low';
  completed: boolean;
}

export interface UseStructuredChatResult {
  messages: ChatMessage[];
  currentQuestion: StructuredQuestion | null;
  isTyping: boolean;
  sendMessage: (message: string) => Promise<void>;
  clearChat: () => void;
  isConnected: boolean;
  error: string | null;
  progress: { current: number; total: number };
  onBriefUpdate: (updatedBrief: any) => void;
}

/**
 * Hook para chat estructurado con preguntas una por una
 * Actualiza el brief autom√°ticamente con cada respuesta
 */
export function useStructuredChat(
  brief: any, 
  analysis: any, 
  onBriefChange: (updatedBrief: any) => void
): UseStructuredChatResult {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [questions, setQuestions] = useState<StructuredQuestion[]>([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [isTyping, setIsTyping] = useState(false);
  const [isConnected, setIsConnected] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [workingBrief, setWorkingBrief] = useState<any>(normalizeBrief(brief));
  const [completedQuestions, setCompletedQuestions] = useState<Set<string>>(new Set());
  const { evaluateBrief } = useBriefCompletionEvaluator();

  // Definir todos los campos del brief de manera centralizada
  const getAllBriefFields = useCallback(() => [
    // B√°sicos
    { key: 'projectTitle', label: 'T√≠tulo del Proyecto', required: true },
    { key: 'briefSummary', label: 'Resumen Ejecutivo', required: true },
    
    // Negocio  
    { key: 'businessChallenge', label: 'Desaf√≠o de Negocio', required: true },
    { key: 'strategicObjectives', label: 'Objetivos Estrat√©gicos', required: true },
    
    // Audiencia
    { key: 'targetAudience.primary', label: 'Audiencia Primaria', required: true },
    { key: 'targetAudience.secondary', label: 'Audiencia Secundaria', required: false },
    { key: 'targetAudience.insights', label: 'Insights de Audiencia', required: true },
    
    // Posicionamiento
    { key: 'brandPositioning', label: 'Posicionamiento de Marca', required: true },
    
    // Estrategia Creativa
    { key: 'creativeStrategy.bigIdea', label: 'Gran Idea Creativa', required: true },
    { key: 'creativeStrategy.messageHierarchy', label: 'Jerarqu√≠a de Mensajes', required: true },
    { key: 'creativeStrategy.toneAndManner', label: 'Tono y Manera', required: true },
    { key: 'creativeStrategy.creativeMandatories', label: 'Elementos Obligatorios', required: false },
    
    // Canales
    { key: 'channelStrategy.recommendedMix', label: 'Mix de Canales Recomendado', required: true },
    { key: 'channelStrategy.integratedApproach', label: 'Enfoque Integrado', required: true },
    
    // M√©tricas
    { key: 'successMetrics.primary', label: 'KPIs Primarios', required: true },
    { key: 'successMetrics.secondary', label: 'KPIs Secundarios', required: false },
    { key: 'successMetrics.measurementFramework', label: 'Framework de Medici√≥n', required: true },
    
    // Presupuesto
    { key: 'budgetConsiderations.estimatedRange', label: 'Rango Presupuestario', required: false },
    { key: 'budgetConsiderations.keyInvestments', label: 'Inversiones Clave', required: false },
    { key: 'budgetConsiderations.costOptimization', label: 'Optimizaci√≥n de Costos', required: false },
    
    // Riesgos
    { key: 'riskAssessment.risks', label: 'An√°lisis de Riesgos', required: true },
    
    // Implementaci√≥n
    { key: 'implementationRoadmap.phases', label: 'Fases de Implementaci√≥n', required: true },
    { key: 'nextSteps', label: 'Pr√≥ximos Pasos', required: true },
    
    // Anexos
    { key: 'appendix.assumptions', label: 'Supuestos', required: false },
    { key: 'appendix.references', label: 'Referencias', required: false },
  ], []);

  // Generar preguntas estructuradas basadas en el brief completo
  const generateStructuredQuestions = useCallback((briefData: any, analysisData: any): StructuredQuestion[] => {
    const questions: StructuredQuestion[] = [];
    
    console.log('Generando preguntas para todo el brief:', { briefData });
    
    // Usar la funci√≥n centralizada para obtener todos los campos
    const allBriefFields = getAllBriefFields();
    
    // Generar preguntas para cada campo usando la l√≥gica inteligente
    allBriefFields.forEach((field) => {
      const fieldQuestions = generateQuestionsForBriefField(field, briefData);
      questions.push(...fieldQuestions);
    });
    
    // Ordenar por prioridad (requeridos primero)
    const sortedQuestions = questions.sort((a, b) => {
      const priorityOrder = { high: 3, medium: 2, low: 1 };
      return priorityOrder[b.priority] - priorityOrder[a.priority];
    });
    
    console.log('Preguntas generadas despu√©s de filtros inteligentes:', sortedQuestions.length, sortedQuestions.map(q => `${q.field}: ${q.question.substring(0, 50)}...`));
    
    return sortedQuestions;
  }, [getAllBriefFields]);
  
  // Funci√≥n para generar preguntas adicionales basadas en campos faltantes o d√©biles
  const generateAdditionalQuestions = useCallback((briefData: any, completedQuestionsSet?: Set<string>): StructuredQuestion[] => {
    const questions: StructuredQuestion[] = [];
    const questionsToCheck = completedQuestionsSet || completedQuestions;
    
    // Usar la funci√≥n centralizada para obtener todos los campos
    const allBriefFields = getAllBriefFields();
    
    // Revisar cada campo y generar preguntas si es necesario
    allBriefFields.forEach((field) => {
      const questionId = `field-${field.key}`;
      
      // Solo generar si no est√° ya completada
      if (!questionsToCheck.has(questionId)) {
        const fieldQuestions = generateQuestionsForBriefField(field, briefData);
        
        // Filtrar preguntas que no hayan sido completadas
        const newQuestions = fieldQuestions.filter(q => !questionsToCheck.has(q.id));
        questions.push(...newQuestions);
      }
    });
    
    console.log('üîÑ Preguntas adicionales generadas:', {
      totalGenerated: questions.length,
      questionsFields: questions.map(q => q.field),
      briefFieldsAnalyzed: allBriefFields.length,
      completedQuestionsCount: questionsToCheck.size,
      sampleBriefContent: {
        projectTitle: briefData?.projectTitle,
        strategicObjectives: briefData?.strategicObjectives,
        targetAudience: briefData?.targetAudience
      }
    });
    
    return questions;
  }, [completedQuestions, getAllBriefFields]);
  
  // Funci√≥n para evaluar si un campo necesita mejora basado en su contenido y tipo
  const needsImprovement = (fieldKey: string, currentValue: any): boolean => {
    if (!currentValue) return false;
    
    // Diferentes criterios seg√∫n el tipo de campo
    switch (fieldKey) {
      case 'projectTitle':
        // Un t√≠tulo es bueno si tiene al menos 3 palabras significativas y no es gen√©rico
        const titleWords = currentValue.split(' ').filter((w: string) => w.length > 2);
        const isGeneric = currentValue.toLowerCase().includes('proyecto') &&
                         currentValue.toLowerCase().includes('campa√±a') &&
                         currentValue.toLowerCase().includes('brief');
        const isTooShort = titleWords.length < 2;
        const isVeryGeneric = currentValue.toLowerCase() === 'proyecto' || 
                             currentValue.toLowerCase() === 'campa√±a' ||
                             currentValue.toLowerCase() === 'brief';
        
        // Solo necesita mejora si es realmente d√©bil
        return isTooShort || isVeryGeneric || (isGeneric && titleWords.length < 4);
      
      case 'briefSummary':
        // Un resumen debe tener al menos 100 caracteres y ser descriptivo
        return currentValue.length < 100 || 
               !currentValue.includes('objetivo') ||
               currentValue.split('.').length < 3;
      
      case 'businessChallenge':
        // Un desaf√≠o debe explicar un problema espec√≠fico
        return currentValue.length < 80 ||
               !currentValue.toLowerCase().includes('problema') ||
               !currentValue.toLowerCase().includes('necesita');
      
      case 'strategicObjectives':
        // Objetivos deben ser espec√≠ficos y medibles
        if (Array.isArray(currentValue)) {
          return currentValue.length < 3 ||
                 currentValue.some((obj: string) => obj.length < 30 || !obj.includes('%'));
        }
        return true;
      
      case 'targetAudience.primary':
        // Audiencia debe incluir demograf√≠a y psicograf√≠a
        return currentValue.length < 100 ||
               !currentValue.toLowerCase().includes('edad') ||
               !currentValue.toLowerCase().includes('inter');
      
      case 'targetAudience.insights':
        // Insights deben ser profundos y espec√≠ficos
        if (Array.isArray(currentValue)) {
          return currentValue.length < 2 ||
                 currentValue.some((insight: string) => insight.length < 50);
        }
        return true;
      
      case 'brandPositioning':
        // Posicionamiento debe ser claro y diferenciado
        return currentValue.length < 80 ||
               !currentValue.toLowerCase().includes('competencia') ||
               !currentValue.toLowerCase().includes('√∫nico');
      
      case 'creativeStrategy.bigIdea':
        // Gran idea debe ser impactante y memorable
        return currentValue.length < 60 ||
               currentValue.split(' ').length < 8;
      
      case 'creativeStrategy.messageHierarchy':
        // Mensajes deben estar jerarquizados
        if (Array.isArray(currentValue)) {
          return currentValue.length < 3 ||
                 currentValue.some((msg: string) => msg.length < 20);
        }
        return true;
      
      case 'creativeStrategy.toneAndManner':
        // Tono debe ser espec√≠fico y detallado
        return currentValue.length < 60 ||
               currentValue.split(',').length < 3;
      
      case 'channelStrategy.integratedApproach':
        // Enfoque integrado debe explicar sinergia
        return currentValue.length < 100 ||
               !currentValue.toLowerCase().includes('canal') ||
               !currentValue.toLowerCase().includes('integra');
      
      case 'successMetrics.primary':
        // KPIs deben ser espec√≠ficos y medibles
        if (Array.isArray(currentValue)) {
          return currentValue.length < 3 ||
                 currentValue.some((kpi: string) => kpi.length < 20 || !kpi.includes('%'));
        }
        return true;
      
      case 'successMetrics.measurementFramework':
        // Framework debe explicar metodolog√≠a
        return currentValue.length < 100 ||
               !currentValue.toLowerCase().includes('medici√≥n') ||
               !currentValue.toLowerCase().includes('m√©todo');
      
      case 'nextSteps':
        // Pr√≥ximos pasos deben ser actionables
        if (Array.isArray(currentValue)) {
          return currentValue.length < 3 ||
                 currentValue.some((step: string) => step.length < 30 || !step.includes('semana'));
        }
        return true;
      
      // Campos que normalmente est√°n vac√≠os en briefs iniciales
      case 'riskAssessment.risks':
      case 'implementationRoadmap.phases':
      case 'budgetConsiderations.estimatedRange':
      case 'budgetConsiderations.keyInvestments':
      case 'budgetConsiderations.costOptimization':
      case 'channelStrategy.recommendedMix':
      case 'successMetrics.secondary':
      case 'appendix.assumptions':
      case 'appendix.references':
        // Estos campos casi siempre necesitan trabajo
        return true;
      
      default:
        // Para campos no especificados, usar criterio general
        if (Array.isArray(currentValue)) {
          return currentValue.length < 2;
        }
        return currentValue.length < 50;
    }
  };
  
  // Funci√≥n para generar preguntas para un campo espec√≠fico del brief
  const generateQuestionsForBriefField = (fieldConfig: any, briefData: any): StructuredQuestion[] => {
    const questions: StructuredQuestion[] = [];
    
    // Obtener el valor actual del campo
    let currentValue: any;
    if (fieldConfig.key.includes('.')) {
      const [parent, child] = fieldConfig.key.split('.');
      currentValue = briefData[parent]?.[child];
    } else {
      currentValue = briefData[fieldConfig.key];
    }
    
    // Determinar si el campo necesita mejora
    const isEmpty = !currentValue || 
      (Array.isArray(currentValue) && currentValue.length === 0) ||
      (typeof currentValue === 'string' && currentValue.trim() === '') ||
      (typeof currentValue === 'object' && Object.keys(currentValue).length === 0);
    
    // L√≥gica inteligente para determinar si un campo es d√©bil basado en su tipo
    const isWeak = !isEmpty && needsImprovement(fieldConfig.key, currentValue);
    
    // Generar pregunta solo si el campo est√° vac√≠o o realmente necesita mejora
    if (isEmpty || isWeak) {
      const priority = fieldConfig.required ? 'high' : 'medium';
      const question = generateQuestionForField(fieldConfig.key, fieldConfig.label, currentValue, isEmpty);
      
      console.log(`Campo ${fieldConfig.key}: isEmpty=${isEmpty}, isWeak=${isWeak}, valor="${currentValue}", pregunta generada=${!!question}`);
      
      if (question) {
        questions.push({
          id: `field-${fieldConfig.key}`,
          field: fieldConfig.key,
          question,
          priority,
          completed: false,
        });
      }
    } else {
      console.log(`Campo ${fieldConfig.key}: NO necesita mejora - valor="${currentValue}"`);
    }
    
    return questions;
  };
  
  // Funci√≥n para generar la pregunta espec√≠fica para cada campo
  const generateQuestionForField = (fieldKey: string, fieldLabel: string, currentValue: any, isEmpty: boolean): string => {
    if (isEmpty) {
      // Preguntas para campos vac√≠os
      const emptyQuestions: { [key: string]: string } = {
        'projectTitle': 'Necesitamos un t√≠tulo espec√≠fico para el proyecto. ¬øCu√°l es el nombre oficial de la campa√±a o proyecto?',
        'briefSummary': 'Falta el resumen ejecutivo. ¬øPuedes describir en 2-3 p√°rrafos qu√© es este proyecto, por qu√© es importante y qu√© se espera lograr?',
        'businessChallenge': 'No veo definido el desaf√≠o de negocio. ¬øCu√°l es el problema espec√≠fico que esta campa√±a debe resolver?',
        'strategicObjectives': 'Necesitamos objetivos estrat√©gicos claros. ¬øCu√°les son los 3-5 objetivos principales que quieres alcanzar con esta campa√±a?',
        'targetAudience.primary': 'Falta definir la audiencia primaria. ¬øQui√©n es exactamente tu audiencia objetivo principal? Incluye demograf√≠a, psicograf√≠a y comportamientos.',
        'targetAudience.insights': 'Necesitamos insights sobre la audiencia. ¬øQu√© motivaciones, necesidades o comportamientos clave has identificado en tu audiencia?',
        'brandPositioning': 'No hay posicionamiento de marca definido. ¬øC√≥mo quieres que tu marca sea percibida en relaci√≥n a la competencia?',
        'creativeStrategy.bigIdea': 'Falta la gran idea creativa. ¬øCu√°l es el concepto central que guiar√° toda la campa√±a?',
        'creativeStrategy.messageHierarchy': 'Necesitamos la jerarqu√≠a de mensajes. ¬øCu√°les son los mensajes clave ordenados por importancia?',
        'creativeStrategy.toneAndManner': 'No est√° definido el tono y manera. ¬øC√≥mo debe sonar y sentirse la comunicaci√≥n de la marca?',
        'channelStrategy.integratedApproach': 'Falta el enfoque integrado de canales. ¬øC√≥mo se complementar√°n los diferentes canales de comunicaci√≥n?',
        'successMetrics.primary': 'No hay KPIs primarios definidos. ¬øCu√°les son las m√©tricas principales para medir el √©xito de la campa√±a?',
        'successMetrics.measurementFramework': 'Falta el framework de medici√≥n. ¬øC√≥mo medir√°s el √©xito de manera integral?',
        'riskAssessment.risks': 'No hay an√°lisis de riesgos. ¬øQu√© riesgos potenciales identificas para este proyecto y c√≥mo los mitigar√≠as?',
        'implementationRoadmap.phases': 'Falta la hoja de ruta de implementaci√≥n. ¬øCu√°les ser√≠an las fases principales para ejecutar esta campa√±a?',
        'nextSteps': 'No hay pr√≥ximos pasos definidos. ¬øCu√°les son las acciones inmediatas que se deben tomar?',
        'budgetConsiderations.estimatedRange': 'No hay estimaci√≥n presupuestaria. ¬øCu√°l es el rango de presupuesto disponible para esta campa√±a?',
        'budgetConsiderations.keyInvestments': 'Faltan las inversiones clave. ¬øEn qu√© √°reas principales se debe invertir el presupuesto?',
        'appendix.assumptions': 'No hay supuestos documentados. ¬øQu√© supuestos clave est√°s considerando para este proyecto?',
      };
      
      return emptyQuestions[fieldKey] || `Necesitamos informaci√≥n sobre ${fieldLabel}. ¬øPuedes proporcionar detalles espec√≠ficos?`;
    } else {
      // Preguntas para campos que necesitan mejora
      const improvementQuestions: { [key: string]: string } = {
        'projectTitle': `El t√≠tulo "${currentValue}" podr√≠a ser m√°s espec√≠fico. ¬øHay un nombre m√°s descriptivo que capture mejor la esencia del proyecto?`,
        'briefSummary': `El resumen actual necesita m√°s contexto estrat√©gico. ¬øPuedes ampliar explicando el contexto de negocio, el problema que resuelve y el impacto esperado?`,
        'businessChallenge': `El desaf√≠o descrito necesita m√°s especificidad. ¬øPuedes profundizar en las causas del problema y por qu√© es cr√≠tico resolverlo ahora?`,
        'strategicObjectives': `Los objetivos actuales necesitan ser m√°s espec√≠ficos y medibles. ¬øPuedes reformularlos con m√©tricas concretas y plazos?`,
        'targetAudience.primary': `La descripci√≥n de la audiencia necesita m√°s detalle. ¬øPuedes a√±adir informaci√≥n sobre edad, ubicaci√≥n, intereses, comportamientos de compra y canales preferidos?`,
        'targetAudience.insights': `Los insights actuales necesitan profundidad. ¬øQu√© insights espec√≠ficos tienes sobre motivaciones, barreras o triggers de compra?`,
        'brandPositioning': `El posicionamiento necesita ser m√°s diferenciado. ¬øC√≥mo se distingue tu marca espec√≠ficamente de la competencia?`,
        'creativeStrategy.bigIdea': `La gran idea creativa necesita ser m√°s impactante. ¬øHay un concepto m√°s memorable que conecte emocionalmente con la audiencia?`,
        'creativeStrategy.messageHierarchy': `Los mensajes necesitan mejor jerarquizaci√≥n. ¬øCu√°l es el mensaje principal y c√≥mo se apoyan los secundarios?`,
        'creativeStrategy.toneAndManner': `El tono necesita ser m√°s espec√≠fico. ¬øPuedes describir con m√°s detalle la personalidad de marca y c√≥mo debe sonar?`,
        'channelStrategy.integratedApproach': `El enfoque integrado necesita m√°s detalle. ¬øC√≥mo se complementar√°n espec√≠ficamente los canales para maximizar el impacto?`,
        'successMetrics.primary': `Los KPIs necesitan ser m√°s espec√≠ficos. ¬øPuedes definir m√©tricas concretas con targets num√©ricos?`,
        'successMetrics.measurementFramework': `El framework de medici√≥n necesita m√°s estructura. ¬øC√≥mo medir√°s el √©xito a corto, mediano y largo plazo?`,
        'nextSteps': `Los pr√≥ximos pasos necesitan ser m√°s espec√≠ficos. ¬øPuedes definir acciones concretas con responsables y fechas?`,
      };
      
      return improvementQuestions[fieldKey] || `La informaci√≥n sobre ${fieldLabel} necesita m√°s detalle. ¬øPuedes ampliar con informaci√≥n m√°s espec√≠fica?`;
    }
  };
  
  
  
  

  // Inicializar chat y preguntas
  useEffect(() => {
    if (brief && analysis && messages.length === 0) {
      const generatedQuestions = generateStructuredQuestions(brief, analysis);
      setQuestions(generatedQuestions);
      setWorkingBrief(normalizeBrief(brief));
      
      if (generatedQuestions.length > 0) {
        const welcomeMessage: ChatMessage = {
          id: Date.now().toString(),
          role: 'assistant',
          content: `¬°Hola! Voy a hacerte preguntas espec√≠ficas para completar y mejorar tu brief hasta alcanzar el 100% de completitud.

üìä **Nuevo sistema inteligente:**
- Analizo TODOS los campos del brief (no solo 5 preguntas)
- Contin√∫o hasta que el brief est√© completamente optimizado
- Muestro tu progreso en tiempo real
- El brief se actualiza autom√°ticamente, pero puedes editarlo manualmente

**Empecemos con las primeras optimizaciones:**`,
          timestamp: Date.now(),
        };
        
        const firstQuestion: ChatMessage = {
          id: (Date.now() + 1).toString(),
          role: 'assistant',
          content: generatedQuestions[0].question,
          timestamp: Date.now(),
          questionId: generatedQuestions[0].id,
          briefField: generatedQuestions[0].field,
        };
        
        setMessages([welcomeMessage, firstQuestion]);
      }
    }
  }, [brief, analysis, generateStructuredQuestions]);

  // Monitorear cambios en workingBrief para debugging
  useEffect(() => {
    const timestamp = new Date().toLocaleTimeString();
    if (workingBrief) {
      console.log(`üîç [${timestamp}] WorkingBrief actualizado en hook:`, {
        fieldCount: Object.keys(workingBrief).length,
        hasProjectTitle: !!workingBrief.projectTitle,
        hasStrategicObjectives: !!workingBrief.strategicObjectives,
        hasTargetAudience: !!workingBrief.targetAudience,
        sampleFields: {
          projectTitle: workingBrief.projectTitle,
          strategicObjectives: workingBrief.strategicObjectives
        }
      });
    }
  }, [workingBrief]);

  // Procesar respuesta del usuario y actualizar brief
  const processUserResponse = useCallback(async (message: string, questionId: string, briefField: string, currentWorkingBrief: any) => {
    console.log('üîÑ Procesando respuesta del usuario:', {
      message: message.substring(0, 50) + '...',
      briefField,
      currentBrief: currentWorkingBrief,
      briefFieldCount: Object.keys(currentWorkingBrief || {}).length
    });
    
    try {
      // Llamar a la API para procesar la respuesta y actualizar el brief
      const response = await callAIToUpdateBrief(message, questionId, briefField, currentWorkingBrief);
      
      console.log('ü§ñ Respuesta de IA recibida:', response);
      
      if (response.updatedBrief) {
        const normalizedBrief = normalizeBrief(response.updatedBrief);
        
        console.log('‚úÖ Brief actualizado correctamente via IA:', {
          field: briefField,
          oldValue: getFieldValue(currentWorkingBrief, briefField),
          newValue: getFieldValue(normalizedBrief, briefField),
          briefUpdated: true
        });
        
        return {
          message: response.followUpMessage || '¬°Perfecto! Informaci√≥n actualizada correctamente.',
          updatedBrief: normalizedBrief
        };
      } else {
        console.warn('‚ö†Ô∏è IA no devolvi√≥ brief actualizado, usando fallback');
        throw new Error('No updated brief received from AI');
      }
    } catch (error) {
      console.error('‚ùå Error processing user response:', error);
      console.log('üîß Usando m√©todo fallback para actualizar brief');
      
      // Fallback: actualizar directamente el campo si la IA falla
      const updatedBrief = { ...currentWorkingBrief };
      
      // Determinar si el campo debe ser un array basado en su configuraci√≥n
      const shouldBeArray = ['strategicObjectives', 'targetAudience.insights', 'creativeStrategy.messageHierarchy', 
                            'creativeStrategy.creativeMandatories', 'successMetrics.primary', 'successMetrics.secondary',
                            'budgetConsiderations.keyInvestments', 'budgetConsiderations.costOptimization', 
                            'riskAssessment.risks', 'nextSteps', 'appendix.assumptions', 'appendix.references'].includes(briefField);
      
      // Procesar el valor seg√∫n el tipo esperado
      let processedValue = message;
      if (shouldBeArray) {
        // Para arrays, dividir por l√≠neas o comas y limpiar
        processedValue = message.split(/[\n,]+/).map(item => item.trim()).filter(item => item.length > 0);
      }
      
      if (briefField.includes('.')) {
        const [parent, child] = briefField.split('.');
        if (!updatedBrief[parent]) {
          updatedBrief[parent] = {};
        }
        updatedBrief[parent][child] = processedValue;
      } else {
        updatedBrief[briefField] = processedValue;
      }
      
      const normalizedBrief = normalizeBrief(updatedBrief);
      
      console.log('‚úÖ Brief actualizado con fallback:', {
        field: briefField,
        newValue: processedValue,
        briefUpdated: true,
        fallbackUsed: true,
        finalBriefFieldCount: Object.keys(normalizedBrief).length
      });
      
      return {
        message: '‚úÖ Informaci√≥n guardada en tu brief. Continuemos.',
        updatedBrief: normalizedBrief
      };
    }
  }, [getAllBriefFields]);
  
  // Funci√≥n auxiliar para obtener el valor de un campo (incluyendo anidados)
  const getFieldValue = (briefData: any, fieldKey: string) => {
    if (fieldKey.includes('.')) {
      const [parent, child] = fieldKey.split('.');
      return briefData[parent]?.[child];
    }
    return briefData[fieldKey];
  };

  // Enviar mensaje y procesar respuesta
  const sendMessage = useCallback(async (messageContent: string) => {
    if (!messageContent.trim()) return;
    
    const currentQuestion = questions[currentQuestionIndex];
    if (!currentQuestion) return;
    
    console.log('üì® Iniciando sendMessage:', {
      field: currentQuestion.field,
      message: messageContent.substring(0, 50) + '...',
      currentBriefFieldCount: Object.keys(workingBrief || {}).length
    });
    
    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      role: 'user',
      content: messageContent.trim(),
      timestamp: Date.now(),
      questionId: currentQuestion.id,
      briefField: currentQuestion.field,
    };
    
    setMessages(prev => [...prev, userMessage]);
    setIsTyping(true);
    setError(null);
    
    try {
      // Obtener el workingBrief m√°s actualizado directamente del estado
      const currentWorkingBrief = workingBrief;
      
      // Procesar respuesta y actualizar brief
      const responseData = await processUserResponse(
        messageContent.trim(),
        currentQuestion.id,
        currentQuestion.field,
        currentWorkingBrief
      );
      
      // Marcar pregunta como completada
      setQuestions(prev => prev.map(q => 
        q.id === currentQuestion.id ? { ...q, completed: true } : q
      ));
      
      const assistantMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: responseData.message,
        timestamp: Date.now(),
      };
      
      setMessages(prev => [...prev, assistantMessage]);
      
      // Usar el brief actualizado directamente de la respuesta
      const briefToEvaluate = responseData.updatedBrief;
      
      // IMPORTANTE: Actualizar workingBrief y notificar al modal de manera centralizada
      setWorkingBrief(briefToEvaluate);
      
      // Usar setTimeout para asegurar que el estado se actualiza antes de notificar
      setTimeout(() => {
        onBriefChange(briefToEvaluate);
        
        // Verificaci√≥n adicional: confirmar que el campo se actualiz√≥ correctamente
        const verificationValue = getFieldValue(briefToEvaluate, currentQuestion.field);
        console.log('üîç Verificaci√≥n post-actualizaci√≥n:', {
          field: currentQuestion.field,
          valueSet: !!verificationValue,
          actualValue: verificationValue,
          briefFieldCount: Object.keys(briefToEvaluate).length,
          briefSynced: true
        });
        
        // Verificaci√≥n de integridad: asegurar que el brief se manten√© consistente
        if (!verificationValue && currentQuestion.field !== 'targetAudience.secondary') {
          console.warn('‚ö†Ô∏è PROBLEMA DE SINCRONIZACI√ìN DETECTADO:', {
            field: currentQuestion.field,
            expectedValue: 'alg√∫n valor',
            actualValue: verificationValue,
            briefState: briefToEvaluate
          });
        }
      }, 0);
      
      console.log('üîÑ SendMessage: Brief actualizado y sincronizado:', {
        field: currentQuestion.field,
        updatedValue: getFieldValue(briefToEvaluate, currentQuestion.field),
        briefFieldCount: Object.keys(briefToEvaluate).length,
        briefUpdated: true
      });
      
      // Procesar siguiente pregunta
      setTimeout(async () => {
        try {
          console.log('Procesando siguiente pregunta. Brief actualizado:', briefToEvaluate);
          
          // Marcar la pregunta actual como completada
          const currentQuestion = questions[currentQuestionIndex];
          if (currentQuestion) {
            setCompletedQuestions(prev => new Set([...prev, currentQuestion.id]));
            
            // Tambi√©n marcar en el array de preguntas
            setQuestions(prev => prev.map(q => 
              q.id === currentQuestion.id 
                ? { ...q, completed: true }
                : q
            ));
          }
          
          // Buscar la siguiente pregunta no completada
          const nextIndex = currentQuestionIndex + 1;
          const updatedCompletedQuestions = new Set([...completedQuestions, currentQuestion?.id]);
          const nextUncompletedQuestion = questions.slice(nextIndex).find(q => !updatedCompletedQuestions.has(q.id));
          
          if (nextUncompletedQuestion) {
            // Continuar con la siguiente pregunta existente
            const nextQuestionIndex = questions.findIndex(q => q.id === nextUncompletedQuestion.id);
            setCurrentQuestionIndex(nextQuestionIndex);
            
            const nextQuestionMessage: ChatMessage = {
              id: (Date.now() + 2).toString(),
              role: 'assistant',
              content: nextUncompletedQuestion.question,
              timestamp: Date.now(),
              questionId: nextUncompletedQuestion.id,
              briefField: nextUncompletedQuestion.field,
            };
            
            setMessages(prev => [...prev, nextQuestionMessage]);
            
          } else {
            // No hay m√°s preguntas, generar nuevas si es necesario
            console.log('üîç Generando preguntas adicionales con brief actualizado:', {
              briefFieldCount: Object.keys(briefToEvaluate).length,
              completedQuestions: updatedCompletedQuestions.size
            });
            
            const newQuestions = generateAdditionalQuestions(briefToEvaluate, updatedCompletedQuestions);
            
            if (newQuestions.length > 0) {
              const nextQuestion = newQuestions[0];
              
              console.log('üéØ Nueva pregunta generada:', {
                field: nextQuestion.field,
                question: nextQuestion.question.substring(0, 100) + '...'
              });
              
              const nextQuestionMessage: ChatMessage = {
                id: (Date.now() + 2).toString(),
                role: 'assistant',
                content: `Continuemos optimizando: ${nextQuestion.question}`,
                timestamp: Date.now(),
                questionId: nextQuestion.id,
                briefField: nextQuestion.field,
              };
              
              setMessages(prev => [...prev, nextQuestionMessage]);
              setQuestions(prev => [...prev, ...newQuestions]);
              setCurrentQuestionIndex(questions.length);
              
            } else {
              // Evaluar completitud final
              const evaluation = await evaluateBrief(briefToEvaluate);
              
              if (evaluation.isComplete) {
                const finalMessage: ChatMessage = {
                  id: (Date.now() + 2).toString(),
                  role: 'assistant',
                  content: `¬°Excelente! Tu brief est√° completo con un puntaje de ${evaluation.completionScore}%. 

He analizado toda la informaci√≥n y el brief est√° listo para producci√≥n. ¬øHay alg√∫n aspecto espec√≠fico que te gustar√≠a revisar o ajustar?`,
                  timestamp: Date.now(),
                };
                
                setMessages(prev => [...prev, finalMessage]);
              } else {
                // Generar preguntas basadas en la evaluaci√≥n de IA
                if (evaluation.nextQuestions.length > 0) {
                  const nextQuestion = evaluation.nextQuestions[0];
                  const newQuestion: StructuredQuestion = {
                    id: `ai-generated-${Date.now()}`,
                    field: 'general',
                    question: nextQuestion,
                    priority: 'medium',
                    completed: false,
                  };
                  
                  const nextQuestionMessage: ChatMessage = {
                    id: (Date.now() + 2).toString(),
                    role: 'assistant',
                    content: `Puntaje actual: ${evaluation.completionScore}%. ${nextQuestion}`,
                    timestamp: Date.now(),
                    questionId: newQuestion.id,
                    briefField: newQuestion.field,
                  };
                  
                  setMessages(prev => [...prev, nextQuestionMessage]);
                  setQuestions(prev => [...prev, newQuestion]);
                  setCurrentQuestionIndex(questions.length);
                }
              }
            }
          }
        } catch (error) {
          console.error('Error processing next question:', error);
          // Fallback simple: continuar con la siguiente pregunta
          const nextIndex = currentQuestionIndex + 1;
          if (nextIndex < questions.length) {
            setCurrentQuestionIndex(nextIndex);
            
            const nextQuestion: ChatMessage = {
              id: (Date.now() + 2).toString(),
              role: 'assistant',
              content: questions[nextIndex].question,
              timestamp: Date.now(),
              questionId: questions[nextIndex].id,
              briefField: questions[nextIndex].field,
            };
            
            setMessages(prev => [...prev, nextQuestion]);
          }
        }
      }, 1000);
      
      setIsConnected(true);
      
    } catch (err: any) {
      setError(err.message || 'Error en la comunicaci√≥n');
      setIsConnected(false);
      
      const errorMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: '‚ùå Disculpa, tuve un problema t√©cnico. Por favor intenta de nuevo.',
        timestamp: Date.now(),
      };
      
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsTyping(false);
    }
  }, [questions, currentQuestionIndex, processUserResponse, workingBrief]);

  // Funci√≥n para llamar a la IA y actualizar el brief
  const callAIToUpdateBrief = async (
    userResponse: string,
    questionId: string,
    briefField: string,
    currentBrief: any
  ) => {
    const openaiApiKey = process.env.EXPO_PUBLIC_OPENAI_API_KEY;
    if (!openaiApiKey) {
      throw new Error('No se encontr√≥ la API key de OpenAI');
    }

    const systemPrompt = `Eres un experto en marketing que actualiza briefs basado en respuestas del usuario.

BRIEF ACTUAL:
${JSON.stringify(currentBrief, null, 2)}

CAMPO A ACTUALIZAR: ${briefField}
PREGUNTA ID: ${questionId}
RESPUESTA DEL USUARIO: ${userResponse}

INSTRUCCIONES:
1. Actualiza espec√≠ficamente el campo "${briefField}" del brief con la informaci√≥n proporcionada
2. Si el campo tiene un punto (ej: "targetAudience.primary"), actualiza el objeto anidado correctamente
3. Mant√©n el resto del brief intacto
4. Mejora y estructura la informaci√≥n del usuario de forma profesional
5. IMPORTANTE: Los siguientes campos DEBEN ser arrays: strategicObjectives, targetAudience.insights, creativeStrategy.messageHierarchy, creativeStrategy.creativeMandatories, successMetrics.primary, successMetrics.secondary, budgetConsiderations.keyInvestments, budgetConsiderations.costOptimization, riskAssessment.risks, nextSteps, appendix.assumptions, appendix.references
6. Para campos tipo array, convierte la respuesta del usuario en un array de elementos separados
7. Para campos de texto, mant√©n como string
8. Devuelve el brief completo actualizado en formato JSON
9. Proporciona un mensaje de confirmaci√≥n corto

IMPORTANTE: 
- Para campos anidados como "targetAudience.primary", aseg√∫rate de crear/actualizar la estructura: {"targetAudience": {"primary": "nuevo_valor"}}
- Para arrays, divide la respuesta del usuario en elementos individuales (por l√≠neas, comas, etc.)
- Preserva todos los dem√°s campos exactamente como est√°n
- Si el campo "${briefField}" debe ser array seg√∫n la lista anterior, SIEMPRE devol√≥lvelo como array

Formato de respuesta (JSON v√°lido):
{
  "updatedBrief": {brief_actualizado_completo},
  "followUpMessage": "mensaje_de_confirmacion"
}`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${openaiApiKey}`,
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userResponse },
        ],
        temperature: 0.3,
        max_tokens: 2000,
        response_format: { type: "json_object" },
      }),
    });

    if (!response.ok) {
      throw new Error(`Error HTTP ${response.status}`);
    }

    const data = await response.json();
    const aiResponse = data.choices?.[0]?.message?.content;

    if (!aiResponse) {
      throw new Error('No se recibi√≥ respuesta de la IA');
    }

    try {
      const parsedResponse = JSON.parse(aiResponse);
      console.log('Respuesta de IA parseada:', parsedResponse);
      return parsedResponse;
    } catch (error) {
      console.error('Error parsing AI response:', error);
      
      // Fallback: actualizar manualmente
      const updatedBrief = { ...currentBrief };
      
      // Determinar si el campo debe ser un array
      const shouldBeArray = ['strategicObjectives', 'targetAudience.insights', 'creativeStrategy.messageHierarchy', 
                            'creativeStrategy.creativeMandatories', 'successMetrics.primary', 'successMetrics.secondary',
                            'budgetConsiderations.keyInvestments', 'budgetConsiderations.costOptimization', 
                            'riskAssessment.risks', 'nextSteps', 'appendix.assumptions', 'appendix.references'].includes(briefField);
      
      // Procesar el valor seg√∫n el tipo esperado
      let processedValue = userResponse;
      if (shouldBeArray) {
        // Para arrays, dividir por l√≠neas o comas y limpiar
        processedValue = userResponse.split(/[\n,]+/).map(item => item.trim()).filter(item => item.length > 0);
      }
      
      if (briefField.includes('.')) {
        const [parent, child] = briefField.split('.');
        if (!updatedBrief[parent]) {
          updatedBrief[parent] = {};
        }
        updatedBrief[parent][child] = processedValue;
      } else {
        updatedBrief[briefField] = processedValue;
      }
      
      return {
        updatedBrief,
        followUpMessage: 'Informaci√≥n actualizada correctamente.',
      };
    }
  };

  const clearChat = useCallback(() => {
    setMessages([]);
    setQuestions([]);
    setCurrentQuestionIndex(0);
    setCompletedQuestions(new Set());
    setError(null);
    setIsConnected(true);
  }, []);

  const onBriefUpdate = useCallback((updatedBrief: any) => {
    const normalizedBrief = normalizeBrief(updatedBrief);
    setWorkingBrief(normalizedBrief);
    onBriefChange(normalizedBrief);
    console.log('onBriefUpdate called with:', normalizedBrief);
  }, [onBriefChange]);

  return {
    messages,
    currentQuestion: questions[currentQuestionIndex] || null,
    isTyping,
    sendMessage,
    clearChat,
    isConnected,
    error,
    progress: {
      current: completedQuestions.size,
      total: questions.length,
    },
    onBriefUpdate,
  };
}